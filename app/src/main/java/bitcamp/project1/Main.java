/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.project1;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        AccountBook accountBook = new AccountBook();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("----------------------------");
            System.out.println("1. 수입 추가");
            System.out.println("2. 지출 추가");
            System.out.println("3. 모든 거래 보기");
            System.out.println("4. 지출 내역 보기");
            System.out.println("5. 종료");
            System.out.println("----------------------------");
            System.out.print("옵션을 선택하세요: ");


            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("날짜 입력 (YYYY-MM-DD): ");
                    LocalDate incomeDate = LocalDate.parse(scanner.nextLine());
                    System.out.print("금액 입력: ");
                    double incomeAmount = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    System.out.print("설명 입력: ");
                    String incomeDescription = scanner.nextLine();
                    accountBook.addTransaction(new Income(incomeDate, (long) incomeAmount, incomeDescription));
                    break;
                case 2:
                    System.out.print("날짜 입력 (YYYY-MM-DD): ");
                    LocalDate expenseDate = LocalDate.parse(scanner.nextLine());
                    System.out.print("금액 입력: ");
                    double expenseAmount = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    System.out.println("용도 선택:");
                    System.out.println("1. 주거");
                    System.out.println("2. 통신");
                    System.out.println("3. 교통");
                    System.out.println("4. 금융");
                    System.out.println("5. 식비");
                    System.out.println("6. 취미");
                    System.out.print("옵션을 선택하세요: ");
                    int categoryChoice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    Expense.Category category = null;
                    switch (categoryChoice) {
                        case 1:
                            category = Expense.Category.HOUSING;
                            break;
                        case 2:
                            category = Expense.Category.COMMUNICATION;
                            break;
                        case 3:
                            category = Expense.Category.TRANSPORTATION;
                            break;
                        case 4:
                            category = Expense.Category.FINANCE;
                            break;
                        case 5:
                            category = Expense.Category.FOOD;
                            break;
                        case 6:
                            category = Expense.Category.HOBBY;
                            break;
                        default:
                            System.out.println("잘못된 선택입니다.");
                            continue;
                    }
                    System.out.print("설명 입력: ");
                    String expenseDescription = scanner.nextLine();
                    accountBook.addTransaction(new Expense(expenseDate, (long) expenseAmount, expenseDescription, category));
                    break;
                case 3:
                    accountBook.printAllTransactions();
                    break;
                case 4:
                    System.out.println("1. 전체내역");
                    System.out.println("   a. 용도별 지출 비중");
                    System.out.println("2. 용도별 지출 내역");
                    System.out.println("   a. 주거");
                    System.out.println("   b. 통신");
                    System.out.println("   c. 교통");
                    System.out.println("   d. 금융");
                    System.out.println("   e. 식비");
                    System.out.println("   f. 취미");
                    System.out.println("3. 기간별 지출 내역");
                    System.out.println("   a. 일별 지출 내역 (사용자가 날짜 지정)");
                    System.out.println("   b. 월별 지출 내역 (사용자가 날짜 지정)");
                    System.out.println("   c. 연도별 지출 내역 (사용자가 날짜 지정)");
                    System.out.println("   d. 전월 대비 지출 증감률");
                    System.out.print("옵션을 선택하세요: ");

                    int expenseChoice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    switch (expenseChoice) {
                        case 1:
                            accountBook.printAllTransactions();
                            // 용도별 지출 비중 출력 (추가 구현 필요)
                            break;
                        case 2:
                            System.out.println("용도별 지출 내역:");
                            System.out.println("1. 주거");
                            System.out.println("2. 통신");
                            System.out.println("3. 교통");
                            System.out.println("4. 금융");
                            System.out.println("5. 식비");
                            System.out.println("6. 취미");
                            System.out.print("옵션을 선택하세요: ");
                            int detailChoice = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            switch (detailChoice) {
                                case 1:
                                    accountBook.printTransactionsByCategory(Expense.Category.HOUSING);
                                    break;
                                case 2:
                                    accountBook.printTransactionsByCategory(Expense.Category.COMMUNICATION);
                                    break;
                                case 3:
                                    accountBook.printTransactionsByCategory(Expense.Category.TRANSPORTATION);
                                    break;
                                case 4:
                                    accountBook.printTransactionsByCategory(Expense.Category.FINANCE);
                                    break;
                                case 5:
                                    accountBook.printTransactionsByCategory(Expense.Category.FOOD);
                                    break;
                                case 6:
                                    accountBook.printTransactionsByCategory(Expense.Category.HOBBY);
                                    break;
                                default:
                                    System.out.println("잘못된 선택입니다.");
                            }
                            break;
                        case 3:
                            System.out.println("기간별 지출 내역:");
                            System.out.println("a. 일별 지출 내역 (사용자가 날짜 지정)");
                            System.out.println("b. 월별 지출 내역 (사용자가 날짜 지정)");
                            System.out.println("c. 연도별 지출 내역 (사용자가 날짜 지정)");
                            System.out.println("d. 전월 대비 지출 증감률");
                            System.out.print("옵션을 선택하세요: ");
                            String periodChoice = scanner.nextLine();

                            switch (periodChoice) {
                                case "a":
                                    System.out.print("날짜 입력 (YYYY-MM-DD): ");
                                    LocalDate dailyDate = LocalDate.parse(scanner.nextLine());
                                    accountBook.printDailyExpenses(dailyDate);
                                    break;
                                case "b":
                                    System.out.print("날짜 입력 (YYYY-MM): ");
                                    YearMonth monthlyDate = YearMonth.parse(scanner.nextLine());
                                    accountBook.printMonthlyExpenses(monthlyDate);
                                    break;
                                case "c":
                                    System.out.print("연도 입력 (YYYY): ");
                                    int year = scanner.nextInt();
                                    scanner.nextLine(); // Consume newline
                                    accountBook.printYearlyExpenses(year);
                                    break;
                                case "d":
                                    System.out.print("이전 월 입력 (YYYY-MM): ");
                                    YearMonth previousMonth = YearMonth.parse(scanner.nextLine());
                                    System.out.print("현재 월 입력 (YYYY-MM): ");
                                    YearMonth currentMonth = YearMonth.parse(scanner.nextLine());
                                    accountBook.printExpenseChangeRate(previousMonth, currentMonth);
                                    break;
                                default:
                                    System.out.println("잘못된 선택입니다.");
                            }
                            break;
                        default:
                            System.out.println("잘못된 선택입니다.");
                    }
                    break;
                case 5:
                    running = false;
                    break;
                default:
                    System.out.println("잘못된 선택입니다. 다시 시도해주세요.");
            }
        }

        scanner.close();
    }
}
